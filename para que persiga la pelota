#include <Arduino.h>
#include <zirconLib.h>
#include <Wire.h> 
#include <Adafruit_Sensor.h> 
#include <Adafruit_BNO055.h> 

const long BAUD_RATE = 19200;

// Giroscopo 
//   Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
//   float correccion;
//   float error = 0;
//   float initialYaw = 0;
//   float currentYaw;

// Angulos 
  float anguloRadPelota;
  float anguloPelota;
   
  float anguloRadArco;
  float anguloArco;

// Velocidades 
  float k; 
  float g = 0.6;
   
// Variables decodificadas
  float decodedXp = 0.0;
  float decodedYp = 0.0;
  float decodedXa = 0.0;
  float decodedYa = 0.0;

// Verificacion de objetos 
  bool haypelota = 0;
  bool hayarco = 0;

// Tolerancias (ajusta según precisión deseada)
  const float tolerancia_centrado = 10.0;   // coordinacion de el arco y la pelota 
  const float tolerancia_cercania = 19.0;  // que tan cerca esta de la pelota el robot 

// Estados del seguimiento
enum TrackingState {GIRANDO, CENTRANDO, AVANZANDO, PATEANDO};
TrackingState trackingState = GIRANDO;

// para patear 
unsigned long empezo_patada_ade = 0;
unsigned long empezo_patada_atr = 0; 

unsigned long empezo_giro = 0;
bool giro_iniciado = false;

void girar() {
  // Iniciar el giro solo una vez
  if (!giro_iniciado) {
    empezo_giro = millis();
    giro_iniciado = true;
  }

  // Determinar el tiempo transcurrido
  unsigned long tiempo_transcurrido = millis() - empezo_giro;

  if (tiempo_transcurrido <= 50) {
    // Girar a máxima potencia durante 50ms
    motor1(100, 0);
    motor2(100, 0);
    motor3(100, 0);
  } else {
    // Después, girar a baja potencia
    motor1(50 * g, 0);
    motor2(50 * g, 0);
    motor3(50 * g, 0);
  }

  // horario
}


void detenerMotores() 
{
  motor1(0, 0); 
  motor2(0, 0); 
  motor3(0, 0); 
}

void avanzarAlFrente() 
{
  motor2(50, 0);
  motor1(50, 1);
  motor3(0, 0);
}


void setup() 
{ 
//  delay(3000);
//  if (!bno.begin()) 
//  {
//    Serial.println("¡No se pudo encontrar el BNO055!");
//    while (1);
//  }
//  bno.setExtCrystalUse(true); 
//  sensors_event_t event;
//  bno.getEvent(&event);
//  initialYaw   = event.orientation.x; // 0..360
//  
  InitializeZircon();
//while(true)
//{
//  girar();
//  delay(2000);
//  
//  avanzarAlFrente();
//  delay(2000);
//
//  detenerMotores();
//  delay(2000);
//} 
  
  Serial.begin(BAUD_RATE);
  Serial.println("estamos en setup");
  while (!Serial && millis() < 5000);
  Serial1.begin(BAUD_RATE);
  Serial.println("Decodificador Teensy iniciado.");
}



void loop() 
{ 
//  sensors_event_t event;
//  bno.getEvent(&event);
//
//  Serial.println ("X: ");
//  Serial.println(event.orientation.x);
//  currentYaw   = event.orientation.x;
//  
  if (Serial1.available() >= 6)
  {
    int header1 = Serial1.read();
    int xp = Serial1.read();
    int yp = Serial1.read();
    int header2 = Serial1.read(); 
    int xa = Serial1.read();
    int ya = Serial1.read();

    if (header1 == 201 && header2 == 202)
    {
      decodedXp = xp / 2.0;
      decodedXa = xa / 2.0;

      if(yp == 0) { decodedYp = 0; }
      else { decodedYp = (yp / 2.0) - 50.0; }

      if(ya == 0) { decodedYa = 0; }
      else { decodedYa = (ya / 2.0) - 50.0; }

      // Calcular el ángulo en radianes
        anguloRadPelota = atan2(decodedYp, decodedXp);
      // Convertir a grados
        anguloPelota = anguloRadPelota * 180.0 / PI;
      // Calcular el ángulo en radianes
        anguloRadArco = atan2(decodedYp, decodedXp);
      // Convertir a grados
        anguloArco = anguloRadArco * 180.0 / PI;

      // Mostrar datos
      Serial.print("X pelota: "); Serial.print(decodedXp);
      Serial.print(" | Y pelota: "); Serial.print(decodedYp);
      Serial.print(" | X arco: "); Serial.print(decodedXa);
      Serial.print(" | Y arco: "); Serial.println(decodedYa);

      if ( xp == 0 )
      {
        haypelota = false;  
      }
      else
      {
        haypelota = true;
      }
      if ( xa == 0 )
      {
        hayarco = false;  
      }
      else
      {
        hayarco = true;
      }
      
    }
      
  }
    Serial.println(haypelota);

// lectura giroscopo

  

// lectura sensores luz





//////////////////// maquina estados


switch(trackingState) 
{
 case GIRANDO:

    if (haypelota == true)
    {
        trackingState = AVANZANDO; 
    }
    else
    {
        girar();   
    }
    break;

 case AVANZANDO: 
    detenerMotores();

    if ( haypelota == true && decodedXp <= tolerancia_cercania ) 
    {
         trackingState = CENTRANDO;
    }
    
    if (haypelota==false)
    {
      trackingState = GIRANDO;   
    } 
    break; 
    
 case CENTRANDO:

    k = 0.6;
    if (decodedYa >= 0)
    {
       //medio circulo 
       motor1(60*k, 0);
       motor2(60*k, 0);
       motor3(105*k, 1); 
    } 
    else
    {
       //medio circulo 
       motor1(60*k, 1);
       motor2(60*k, 1);
       motor3(105*k, 0);
    }
    if( hayarco && haypelota && abs(decodedYa)- abs(decodedYp) <= tolerancia_centrado)
    {  
      trackingState = PATEANDO;
    }
    break; 

 case PATEANDO: 

    empezo_patada_ade = millis();
    motor2(100, 0);
    motor1(100, 1);
    motor3(0, 0);
    if(millis() - empezo_patada_ade <= 1000)
    {
      motor2(0, 0);
      motor1(0, 1);
      motor3(0, 0); 

      empezo_patada_atr = millis();
      motor2(100, 1);
      motor1(100, 0);
      motor3(0, 0);
      
      if( millis() - empezo_patada_atr <= 1000 )
      {
        motor2(0, 0);
        motor1(0, 1);
        motor3(0, 0);
      }
    }
    
    trackingState = GIRANDO;   
    
    break;
    
}

     
}
  
      
      


