#include <Arduino.h>
#include <zirconLib.h>

const long BAUD_RATE = 19200;
int potencia = 90;

// Variables decodificadas
float decodedX = 0.0;
float decodedY = 0.0;
float decodedAngle = 0.0;
int decodedSense = 0;

// Tolerancias (ajusta según precisión deseada)
const float tolerancia_centrado = 6.0;   // grados
const float tolerancia_cercania = 20.0;  // cm

// Estados del seguimiento
enum TrackingState { BUSCANDO, GIRANDO, AVANZANDO };
TrackingState trackingState = BUSCANDO;

// Giro no bloqueante
bool girando = false;
unsigned long tiempoInicioGiro = 0;
unsigned long duracionGiro = 0;
int direccionGiro = 0;

void girar(float angulo) {
  if (girando) return;  // Ya está girando, no reiniciar
  duracionGiro = abs(angulo * 43 / 200);
  tiempoInicioGiro = millis();
  girando = true;
  direccionGiro = (angulo > 0) ? 0 : 1;

  motor1(potencia, direccionGiro);
  motor2(potencia, direccionGiro);
  motor3(potencia, direccionGiro);
}





void detenerMotores()
{
  motor1(0, 0); motor1(0, 1);
  motor2(0, 0); motor2(0, 1);
  motor3(0, 0); motor3(0, 1);
  girando = false;
}

void avanzarAlFrente(){
  motor3(100, 0);
  motor2(100, 1);
}











void setup()
{
  InitializeZircon();
  Serial.begin(BAUD_RATE);
  while (!Serial && millis() < 5000);
  Serial1.begin(BAUD_RATE);
  Serial.println("Decodificador Teensy iniciado.");
}










void loop()
{

  //Estados del Robot
  switch (TrackingState)
    case BUSCANDO:
    
      girar(5);
      //descanso
      int tiempoFinalGiro = millis();
      if(millis() - tiempoFinalGiro < 200)
       {
        detenerMotores();
       }
      break;
    
    
    case GIRANDO:
      girar(decodedAngle);
      break;


    case AVANZANDO:
      avanzarAlFrente();
      break;



  //Tareas en paralelo de robot
    bool detectaPelota = false; 
    //Lectura de datos
    if(Serial.available()>=8)
     {
      int header1 = Serial1.read();
      int x = Serial1.read();
      int header2 = Serial1.read();
      int y = Serial1.read();
      int header3 = Serial1.read();
      int ang = Serial1.read();
      int header4 = Serial1.read(); 
      int sentido = Serial1.read();
     }
    if (header1 == 201 && header2 == 202 && header3 == 203 && header4 == 204)
    {
      decodedX = x / 2.0;
      decodedY = (y / 2.0) - 50.0;
      decodedAngle = ang - 100.0;
      decodedSense = sentido;
      detectaPelota = true;
  
      // Mostrar datos
      Serial.print("X: "); Serial.print(decodedX);
      Serial.print(" | Y: "); Serial.print(decodedY);
      Serial.print(" | Ang: "); Serial.print(decodedAngle);
      Serial.print(" | Sentido: "); Serial.println(decodedSense);
    }
    else
    {
      // Paquete con headers incorrectos
      Serial.println("Paquete inválido, descartado.");
    }


    //Cambiar de BUSCANDO a GIRANDO
    if(trackingState == BUSCANDO && abs(decodedAngle) > tolerancia_centrado)
    {
      trackingState = GIRANDO;
    }

    
    //Cambiar de GIRANDO a AVANZANDO
    if (trackingState == GIRANDO && abs(decodedAngle) =< tolerancia_centrado)
    {
      trackingState = AVANZANDO;
    }

    //Cambiar de AVANZANDO a GIRANDO
    if(trackingState==AVANZANDO && abs(decodedAngle) > tolerancia-centrado)    
    {
      trackingState = GIRANDO;
    }

    //Cambiar de AVANZANDO/GIRANDO a BUSCANDO
    if(detectaPelota == false)
    {
      trackingState = BUSCANDO;
    }

    //cambiar de AVANZANDO a DETENER MOTORES 
//    if(trackingState == AVANZANDO && detectaPelota == false) 
//    {
//      detenerMotores();
//    }

    
}
