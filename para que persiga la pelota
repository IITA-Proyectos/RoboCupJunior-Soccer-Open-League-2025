#include <Arduino.h>
#include <zirconLib.h>

const long BAUD_RATE = 19200;
int potencia = 90;

// Variables decodificadas
float decodedX = 0.0;
float decodedY = 0.0;
float decodedAngle = 0.0;
int decodedSense = 0;

// Tolerancias (ajusta seg칰n precisi칩n deseada)
const float tolerancia_centrado = 6.0;   // grados
const float tolerancia_cercania = 20.0;  // cm

// Estados del seguimiento
enum TrackingState {BUSCANDO, GIRANDO, AVANZANDO};
TrackingState trackingState = BUSCANDO;

// Giro no bloqueante
bool girando = false;
unsigned long tiempoInicioGiro = 0;
unsigned long duracionGiro = 0;
int direccionGiro = 0;

void girar(float angulo)     // IMPORTANTE est치 parte solo calcula el tiempo de duraci칩n del giro y enciende los motores, la parte donde detiene los motores est치 en el loop 
{
  if (girando) return;  // Ya est치 girando, no reiniciar
  duracionGiro = abs(angulo * 43 / 200);   // calibrar este valor seg칰n tu robot
  tiempoInicioGiro = millis();
  girando = true;
  direccionGiro = (angulo > 0) ? 0 : 1;

  motor1(potencia, direccionGiro);
  motor2(potencia, direccionGiro);
  motor3(potencia, direccionGiro);
}

void detenerMotores() 
{
  motor1(0, 0); motor1(0, 1);
  motor2(0, 0); motor2(0, 1);
  motor3(0, 0); motor3(0, 1);
  girando = false;
}

void avanzarAlFrente() 
{
  motor3(100, 0);
  motor2(100, 1);
}

void setup() 
{
  InitializeZircon();
  Serial.begin(BAUD_RATE);
  while (!Serial && millis() < 5000);
  Serial1.begin(BAUD_RATE);
  Serial.println("Decodificador Teensy iniciado.");
}

void loop() 
{
// PARA LA FUNCION DE GIRAR 
// Finalizar giro si ya pas칩 el tiempo 
if (girando && millis() - tiempoInicioGiro >= duracionGiro)
{
    detenerMotores();
    girando = false; 
}

 //游냣 --- ESTADOS DEL ROBOT --- 游냣
switch (trackingState)
{
    case BUSCANDO: 
    
      static unsigned long ultimoIntentoBusqueda = 0;     // static significa que se va a crear solo en el primer loop y luego, aunque ac치 diga que vale 0 su valor va a ser el 칰ltimo que le des en el loop
    
      if (millis() - ultimoIntentoBusqueda >= 500)     // espera 500 me y luego gira 5 grados 
      {
        girar(5);                   // gira 5 grados
        ultimoIntentoBusqueda = millis();   // reinicia el contador
      }
      break;
    
    
    case GIRANDO:
      girar(decodedAngle);
      break;


    case AVANZANDO:
      avanzarAlFrente();
      break;
}


//游냣 --- LECTURA DE DATOS --- 游냣
  bool detectaPelota = false; 

  static int header1, header2, header3, header4;
  static int x, y, ang, sentido;

  if (Serial1.available() >= 8) 
  {
    header1 = Serial1.read();
    x       = Serial1.read();
    header2 = Serial1.read();
    y       = Serial1.read();
    header3 = Serial1.read();
    ang     = Serial1.read();
    header4 = Serial1.read(); 
    sentido = Serial1.read();
  }

  if (header1 == 201 && header2 == 202 && header3 == 203 && header4 == 204) 
  {
    decodedX = x / 2.0;
    decodedY = (y / 2.0) - 50.0;
    decodedAngle = ang - 100.0;
    decodedSense = sentido;
    detectaPelota = true;

    Serial.print("X: "); Serial.print(decodedX);
    Serial.print(" | Y: "); Serial.print(decodedY);
    Serial.print(" | Ang: "); Serial.print(decodedAngle);
    Serial.print(" | Sentido: "); Serial.println(decodedSense);
  }
  else 
  {
    Serial.println("Paquete inv치lido, descartado.");
  }


//游냣 --- CAMBIOS DE ESTADO --- 游냣

  //Cambiar de BUSCANDO a GIRANDO
  if (trackingState == BUSCANDO && abs(decodedAngle) > tolerancia_centrado) 
  {
    trackingState = GIRANDO;
  }


  //Cambiar de GIRANDO a AVANZANDO
  if (trackingState == GIRANDO && abs(decodedAngle) <= tolerancia_centrado) 
  {
    trackingState = AVANZANDO;
  }


  //Cambiar de AVANZANDO a GIRANDO
  if (trackingState == AVANZANDO && abs(decodedAngle) > tolerancia_centrado) 
  {
    trackingState = GIRANDO;
  }


  //Cambiar de AVANZANDO/GIRANDO a BUSCANDO
  if (detectaPelota == false) 
  {
    trackingState = BUSCANDO;
  }


      //cambiar de AVANZANDO a DETENER MOTORES 
//    if(trackingState == AVANZANDO && detectaPelota == false) 
//    {
//      detenerMotores();
//    }

}
