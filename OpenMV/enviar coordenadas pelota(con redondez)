from pyb import UART
import sensor, image, time
import math

# Comunicación UART
uart = UART(3, 115200)

# Inicializar cámara
sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QVGA)
sensor.skip_frames(time=2000)
sensor.set_auto_whitebal(False)
clock = time.clock()

# Constantes físicas
h = 10   # Altura de la cámara en cm
pi = math.pi
r = 13.5 / (pi * 2)  # Radio de la pelota en cm

# Threshold LAB para naranja (ajustar si hace falta)
orange_threshold = (10, 70, 20, 60, 10, 50)

# Matriz de homografía calibrada
def transformarcoordenadas(u, v):
    H = [[-2.18880937e-03, -2.63497709e-01, -2.44260579e+02],
         [1.02845724e+00,  1.44625829e-03, -1.92956221e+02],
         [4.01073113e-04, -5.44887132e-02,  1.00000000e+00]]
    
    denominator = H[2][0]*u + H[2][1]*v + H[2][2]
    x = (H[0][0]*u + H[0][1]*v + H[0][2]) / denominator
    y = (H[1][0]*u + H[1][1]*v + H[1][2]) / denominator
    
    return x, y

# Bucle principal
while True:
    clock.tick()
    img = sensor.snapshot()

    # Buscar blobs del color naranja
    blobs = img.find_blobs([orange_threshold], pixels_threshold=50, area_threshold=50, merge=True)

    pelota = None
    mejor_roundness = 0

    for blob in blobs:
        redondez = blob.roundness()
        elongacion = blob.elongation()

        # Filtrar por forma y tamaño
        if redondez > 0.6 and elongacion < 1.4 and blob.pixels() > 80:
            if redondez > mejor_roundness:
                pelota = blob
                mejor_roundness = redondez

    if pelota:
        print("Pelota detectada")

        # Dibujo visual
        img.draw_rectangle(pelota.rect(), color=(255, 0, 0))
        img.draw_cross(pelota.cx(), pelota.cy(), color=(0, 255, 0))
        img.draw_circle(pelota.cx(), pelota.cy(), int((pelota.w() + pelota.h()) / 4), color=(0, 0, 255))

        # Coordenadas imagen
        u, v = pelota.cx(), pelota.cy()

        # Transformar a coordenadas reales
        x, y = transformarcoordenadas(u, v)
        X = x * (h - r) / h
        Y = y * (h - r) / h
        print("Coordenadas físicas: X = %.2f cm, Y = %.2f cm" % (X, Y))

        # Cálculo de ángulo
        img.draw_line((160, 0, 160, 240), color=(255, 255, 255))
        a_rad = math.atan2(Y, X)
        angulo = math.degrees(a_rad)
        print("Ángulo:", angulo)

        # Sentido: 1 = izquierda, 0 = derecha o centro
        if angulo > 0:
            sentido = 1
        elif angulo < 0:
            sentido = 0
        else:
            sentido = 0

        # Escalar para transmisión por UART
        byteX = min(max(int(X * 2), 0), 200)             # 0–100 cm → 0–200
        byteY = min(max(int((Y + 50) * 2), 0), 200)      # -50 a +50 → 0–200
        byteAng = min(max(int(angulo + 100), 0), 200)    # -100 a +100 → 0–200

        # Enviar paquete
        packet = [
            201, byteX,
            202, byteY,
            203, byteAng,
            204, sentido
        ]

        print("Enviando:", packet)
        uart.write(bytearray(packet))
